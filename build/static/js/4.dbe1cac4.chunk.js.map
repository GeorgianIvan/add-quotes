{"version":3,"sources":["hooks/use-http.js","lib/api.js","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","a","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","module","exports","NewCommentForm","props","commentTextRef","useRef","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","text","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","loadedComments","addedCommentHandler","length","onClick","HighlightedQuote","quote","author","QuoteDetails","match","useRouteMatch","console","log","path","exact","to","url"],"mappings":"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","file":"static/js/4.dbe1cac4.chunk.js","sourcesContent":["import { useReducer, useCallback } from 'react';\r\n\r\nfunction httpReducer(state, action) {\r\n  if (action.type === 'SEND') {\r\n    return {\r\n      data: null,\r\n      error: null,\r\n      status: 'pending',\r\n    };\r\n  }\r\n\r\n  if (action.type === 'SUCCESS') {\r\n    return {\r\n      data: action.responseData,\r\n      error: null,\r\n      status: 'completed',\r\n    };\r\n  }\r\n\r\n  if (action.type === 'ERROR') {\r\n    return {\r\n      data: null,\r\n      error: action.errorMessage,\r\n      status: 'completed',\r\n    };\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction useHttp(requestFunction, startWithPending = false) {\r\n  const [httpState, dispatch] = useReducer(httpReducer, {\r\n    status: startWithPending ? 'pending' : null,\r\n    data: null,\r\n    error: null,\r\n  });\r\n\r\n  const sendRequest = useCallback(\r\n    async function (requestData) {\r\n      dispatch({ type: 'SEND' });\r\n      try {\r\n        const responseData = await requestFunction(requestData);\r\n        dispatch({ type: 'SUCCESS', responseData });\r\n      } catch (error) {\r\n        dispatch({\r\n          type: 'ERROR',\r\n          errorMessage: error.message || 'Something went wrong!',\r\n        });\r\n      }\r\n    },\r\n    [requestFunction]\r\n  );\r\n\r\n  return {\r\n    sendRequest,\r\n    ...httpState,\r\n  };\r\n}\r\n\r\nexport default useHttp;\r\n","const FIREBASE_DOMAIN = 'https://fir-realtime-db-b2e17-default-rtdb.firebaseio.com/';\r\n\r\nexport async function getAllQuotes() {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Could not fetch quotes.');\r\n  }\r\n\r\n  const transformedQuotes = [];\r\n\r\n  for (const key in data) {\r\n    const quoteObj = {\r\n      id: key,\r\n      ...data[key],\r\n    };\r\n\r\n    transformedQuotes.push(quoteObj);\r\n  }\r\n\r\n  return transformedQuotes;\r\n}\r\n\r\nexport async function getSingleQuote(quoteId) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Could not fetch quote.');\r\n  }\r\n\r\n  const loadedQuote = {\r\n    id: quoteId,\r\n    ...data,\r\n  };\r\n\r\n  return loadedQuote;\r\n}\r\n\r\nexport async function addQuote(quoteData) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\r\n    method: 'POST',\r\n    body: JSON.stringify(quoteData),\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Could not create quote.');\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport async function addComment(requestData) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\r\n    method: 'POST',\r\n    body: JSON.stringify(requestData.commentData),\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Could not add comment.');\r\n  }\r\n\r\n  return { commentId: data.name };\r\n}\r\n\r\nexport async function getAllComments(quoteId) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Could not get comments.');\r\n  }\r\n\r\n  const transformedComments = [];\r\n\r\n  for (const key in data) {\r\n    const commentObj = {\r\n      id: key,\r\n      ...data[key],\r\n    };\r\n\r\n    transformedComments.push(commentObj);\r\n  }\r\n\r\n  return transformedComments;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1Xt3g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__w0ZaJ\",\"loading\":\"NewCommentForm_loading__3fveR\",\"control\":\"NewCommentForm_control__3v9Pp\",\"actions\":\"NewCommentForm_actions__3TwsE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2Z_oK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2Yeez\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3bJxN\"};","import { useEffect, useRef } from \"react\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport { addComment } from \"../../lib/api\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport classes from \"./NewCommentForm.module.css\";\r\n\r\nconst NewCommentForm = (props) => {\r\n  const commentTextRef = useRef();\r\n\r\n  const { sendRequest, status, error } = useHttp(addComment);\r\n\r\n  const { onAddedComment } = props;\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\" && !error) {\r\n      onAddedComment();\r\n    }\r\n  }, [status, error, onAddedComment]);\r\n\r\n  const submitFormHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredText = commentTextRef.current.value;\r\n\r\n    sendRequest({\r\n      commentData: {\r\n        text: enteredText,\r\n      },\r\n      quoteId: props.quoteId,\r\n    });\r\n\r\n    // optional: Could validate here\r\n\r\n    // send comment to server\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={submitFormHandler}>\r\n      {status === \"pending\" && (\r\n        <div className=\"centered\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      <div className={classes.control} onSubmit={submitFormHandler}>\r\n        <label htmlFor=\"comment\">Your Comment</label>\r\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button className=\"btn\">Add Comment</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewCommentForm;\r\n","import classes from './CommentItem.module.css';\r\n\r\nconst CommentItem = (props) => {\r\n  return (\r\n    <li className={classes.item}>\r\n      <p>{props.text}</p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default CommentItem;\r\n","import CommentItem from './CommentItem';\r\nimport classes from './CommentsList.module.css';\r\n\r\nconst CommentsList = (props) => {\r\n  return (\r\n    <ul className={classes.comments}>\r\n      {props.comments.map((comment) => (\r\n        <CommentItem key={comment.id} text={comment.text} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default CommentsList;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport { getAllComments } from \"../../lib/api\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\nimport classes from \"./Comments.module.css\";\r\nimport NewCommentForm from \"./NewCommentForm\";\r\nimport CommentsList from \"./CommentsList\";\r\n\r\nconst Comments = () => {\r\n  const [isAddingComment, setIsAddingComment] = useState(false);\r\n  const params = useParams();\r\n\r\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\r\n\r\n  useEffect(() => {\r\n    sendRequest(params.quoteId);\r\n  }, [sendRequest, params.quoteId]);\r\n\r\n  const startAddCommentHandler = () => {\r\n    setIsAddingComment(true);\r\n  };\r\n\r\n  let comments;\r\n\r\n  const addedCommentHandler = useCallback(() => {\r\n    sendRequest(params.quoteId)\r\n  }, [sendRequest, params.quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    comments = (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status === \"completed\" && loadedComments) {\r\n    comments = <CommentsList comments={loadedComments} />;\r\n  }\r\n\r\n  if (\r\n    status === \"completed\" &&\r\n    (!loadedComments || loadedComments.length === 0)\r\n  ) {\r\n    comments = <p className=\"centered\"> No comments added yet.</p>;\r\n  }\r\n\r\n  return (\r\n    <section className={classes.comments}>\r\n      <h2>User Comments</h2>\r\n      {!isAddingComment && (\r\n        <button className=\"btn\" onClick={startAddCommentHandler}>\r\n          Add a Comment\r\n        </button>\r\n      )}\r\n      {isAddingComment && (\r\n        <NewCommentForm\r\n          quoteId={params.quoteId}\r\n          onAddedComment={addedCommentHandler}\r\n        />\r\n      )}\r\n      {comments}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n","import classes from './HighlightedQuote.module.css';\r\n\r\nconst HighlightedQuote = (props) => {\r\n  return (\r\n    <figure className={classes.quote}>\r\n      <p>{props.text}</p>\r\n      <figcaption>{props.author}</figcaption>\r\n    </figure>\r\n  );\r\n};\r\n\r\nexport default HighlightedQuote;\r\n","import { Fragment, useEffect } from \"react\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { Link, Route, useParams } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\n\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst QuoteDetails = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(params.quoteId);\r\n  }, [sendRequest, params.quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  console.log(loadedQuote)\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No Quote Found!</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote\r\n        text={loadedQuote.text}\r\n        author={loadedQuote.author}\r\n      ></HighlightedQuote>\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments></Comments>\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetails;\r\n"],"sourceRoot":""}